#PathPlanner class

Let's very briefly walk through each part below.

__init__ -        We initialize our path planner with a map, M, and typically a start and goal node. 
                  If either of these are None, the rest of the variables here are also set to none. 
                  If you don't have both a start and a goal, there's no path to plan! 
                  The rest of these variables come from functions you will soon implement.

closedSet         includes any explored/visited nodes.
openSet           are any nodes on our frontier for potential future exploration.
cameFrom          will hold the previous node that best reaches a given node
gScore            is the g in our f = g + h equation, or the actual cost to reach our current node
fScore            is the combination of g and h, i.e. the gScore plus a heuristic; total cost to reach the goal
path              comes from the run_search function, which is already built for you.
reconstruct_path  This function just rebuilds the path after search is run, going from the 
                  goal node backwards using each node's cameFrom information.

_reset -          Resets most of our initialized variables for PathPlanner. 
                  This does not reset the map, start or goal variables, for reasons which you may notice later, 
                  depending on your implementation.

run_search -      This does a lot of the legwork to run search once you've implemented everything else below. 
                  First, it checks whether the map, goal and start have been added to the class. 
                  Then, it will also check if the other variables, other than path are initialized 
                  (note that these are only needed to be re-run if the goal or start were not originally given when 
                  initializing the class, based on what we discussed above for __init__.

From here, we use a function you will implement, is_open_empty, to check that 
there are still nodes to explore (you'll need to make sure to feed openSet the 
start node to make sure the algorithm doesn't immediately think there is nothing to open!). 
If we're at our goal, we reconstruct the path. If not, we move our current node from 
the frontier (openSet) and into explored (closedSet). 
Then, we check out the neighbors of the current node, check out their costs, and plan our next move.

This is the main idea behind A*, but none of it is going to work until you implement 
all the relevant parts, which will be included below after the class code.

-------------------------------------------------------------------------------------------------------------

Roads

The roads property is a list where roads[i] contains a list of the intersections that intersection i connects to.

-------------------------------------------------------------------------------------------------------------

Advanced Visualizations
The map above shows a network of roads which spans 40 different intersections (labeled 0 through 39).

The show_map function which generated this map also takes a few optional parameters which might be useful for visualizing the output of the search algorithm you will write.

start - The "start" node for the search algorithm.
goal - The "goal" node.
path - An array of integers which corresponds to a valid sequence of intersection visits on the map.

---------------------------------------------------------------------------------------------------------

#THE MAP

from helpers import Map, load_map_10, load_map_40, show_map
import math

%load_ext autoreload
%autoreload 2

---------------------------------------------------------------------------------------------------------

#THE CLASS

class PathPlanner():
    """Construct a PathPlanner Object"""
    def __init__(self, M, start=None, goal=None):
        """ """
        self.map = M
        self.start= start
        self.goal = goal
        self.closedSet = self.create_closedSet() if goal != None and start != None else None
        self.openSet = self.create_openSet() if goal != None and start != None else None
        self.cameFrom = self.create_cameFrom() if goal != None and start != None else None
        self.gScore = self.create_gScore() if goal != None and start != None else None
        self.fScore = self.create_fScore() if goal != None and start != None else None
        self.path = self.run_search() if self.map and self.start != None and self.goal != None else None
    
    def reconstruct_path(self, current):
        """ Reconstructs path after search """
        total_path = [current]
        while current in self.cameFrom.keys():
            current = self.cameFrom[current]
            total_path.append(current)
        return total_path
    
    def _reset(self):
        """Private method used to reset the closedSet, openSet, cameFrom, gScore, fScore, and path attributes"""
        self.closedSet = None
        self.openSet = None
        self.cameFrom = None
        self.gScore = None
        self.fScore = None
        self.path = self.run_search() if self.map and self.start and self.goal else None

    def run_search(self):
        """ """
        if self.map == None:
            raise(ValueError, "Must create map before running search. Try running PathPlanner.set_map(start_node)")
        if self.goal == None:
            raise(ValueError, "Must create goal node before running search. Try running PathPlanner.set_goal(start_node)")
        if self.start == None:
            raise(ValueError, "Must create start node before running search. Try running PathPlanner.set_start(start_node)")

        self.closedSet = self.closedSet if self.closedSet != None else self.create_closedSet()
        self.openSet = self.openSet if self.openSet != None else  self.create_openSet()
        self.cameFrom = self.cameFrom if self.cameFrom != None else  self.create_cameFrom()
        self.gScore = self.gScore if self.gScore != None else  self.create_gScore()
        self.fScore = self.fScore if self.fScore != None else  self.create_fScore()

        while not self.is_open_empty():
            current = self.get_current_node()

            if current == self.goal:
                self.path = [x for x in reversed(self.reconstruct_path(current))]
                return self.path
            else:
                self.openSet.remove(current)
                self.closedSet.add(current)

            for neighbor in self.get_neighbors(current):
                if neighbor in self.closedSet:
                    continue    # Ignore the neighbor which is already evaluated.

                if not neighbor in self.openSet:    # Discover a new node
                    self.openSet.add(neighbor)
                
                # The distance from start to a neighbor
                #the "dist_between" function may vary as per the solution requirements.
                if self.get_tentative_gScore(current, neighbor) >= self.get_gScore(neighbor):
                    continue        # This is not a better path.

                # This path is the best until now. Record it!
                self.record_best_path_to(current, neighbor)
        print("No Path Found")
        self.path = None
        return False
        
#DATA STRUCTURES
#The next few functions requre you to decide on data structures to use - lists, sets, dictionaries, etc. 
#Make sure to think about what would work most efficiently for each of these. 
#Some can be returned as just an empty data structure (see create_closedSet() for an example), 
#while others should be initialized with one or more values within.
        
def create_closedSet(self):
    """ Creates and returns a data structure suitable to hold the set of nodes already evaluated"""  
    return set()
    
def create_openSet(self):
    """ Creates and returns a data structure suitable to hold the set of currently discovered nodes 
    that are not evaluated yet. Initially, only the start node is known."""
    if self.start != None:
        return {self.start}
    
    raise(ValueError, "Must create start node before creating an open set. Try running PathPlanner.set_start(start_node)")
    
def create_cameFrom(self):
    """Creates and returns a data structure that shows which node can most efficiently be reached from another,
    for each node."""
    # Return a data structure that shows which node can most efficiently be reached from another,
    # for each node. 
    return {}
    
def create_gScore(self):
    """Creates and returns a data structure that holds the cost of getting from the start node to that node, 
    for each node. The cost of going from start to start is zero."""
    # Return a data structure that holds the cost of getting from the start node to that node, for each node.
    # for each node. The cost of going from start to start is zero. The rest of the node's values should 
    # be set to infinity.
    g = {}
    for key in range(len(self.map.intersections)):
        if key != self.start:
            g[key] = float('inf')
        else:
            g[key] = 0
    return g

def create_fScore(self):
    """Creates and returns a data structure that holds the total cost of getting from the start node to the goal
    by passing by that node, for each node. That value is partly known, partly heuristic.
    For the first node, that value is completely heuristic."""
    # Return a data structure that holds the total cost of getting from the start node to the goal
    # by passing by that node, for each node. That value is partly known, partly heuristic.
    # For the first node, that value is completely heuristic. The rest of the node's value should be 
    # set to infinity.
    f = {}
    for key in range(len(self.map.intersections)):
        if key != self.start:
            f[key] = float('inf')
        else:
            f[key] = self.heuristic_cost_estimate(self.start)
    return f
    
#SET CERTAIN VARIABLES
#The below functions help set certain variables if they weren't a part of
#initializating our PathPlanner class, or if they need to be changed for anothe reason.
    
    
def set_map(self, M):
    """Method used to set map attribute """
    self._reset(self)
    self.start = None
    self.goal = None
    
    #Set map to new value. 
    self.map = M
    
def set_start(self, start):
    """Method used to set start attribute """
    self._reset(self)
    # Remove goal, closedSet, openSet, cameFrom, gScore, fScore, 
    # and path attributes' values.
    self.start = start
    self.goal = None
    self.closedSet = None
    self.openSet = None
    self.cameFrom = None
    self.gScore = None
    self.fScore = None
    self.path = None
    
def set_goal(self, goal):
    """Method used to set goal attribute """
    self._reset(self)
    self.goal = goal
    
    
#GET NODE INFORMATION
#The below functions concern grabbing certain node information. 
#In is_open_empty, you are checking whether there are still nodes on the frontier to explore. 
#In get_current_node(), you'll want to come up with a way to find the lowest fScore of the nodes on the frontier. 
#In get_neighbors, you'll need to gather information from the map to find the neighbors of the current node.

    
def is_open_empty(self):
    """returns True if the open set is empty. False otherwise. """
    return self.openSet == None
  
def get_current_node(self):
    """ Returns the node in the open set with the lowest value of f(node)."""
    fnode = {}
    for key in self.openSet:
        fnode[key] = self.calculate_fscore(key)
        
    return min(fnode, key = fnode.get)

def get_neighbors(self, node):
    """Returns the neighbors of a node"""
    # TODO: Return the neighbors of a node
    return self.map.roads[node]

#SCRES AND COSTS
# the main part of the calculation for determining the best path - calculating the various parts of the fScore.

def get_gScore(self, node):
    """Returns the g Score of a node"""
    # TODO: Return the g Score of a node
    return self.gScore.get(node)

def distance(self, node_1, node_2):
    """ Computes the Euclidean L2 Distance"""
    # TODO: Compute and return the Euclidean L2 Distance
    dx = self.map.intersections[node_1][0] - self.map.intersections[node_2][0]
    dy = self.map.intersections[node_1][1] - self.map.intersections[node_2][1]
    
    return math.sqrt(dx**2 + dy**2)

def get_tentative_gScore(self, current, neighbor):
    """Returns the tentative g Score of a node"""
    # TODO: Return the g Score of the current node 
    # plus distance from the current node to it's neighbors
    # print ("get_tentative_gScore", self.get_gScore(current) + self.distance(current, neighbor))
    return self.get_gScore(current) + self.distance(current, neighbor)

def heuristic_cost_estimate(self, node):
    """ Returns the heuristic cost estimate of a node """
    # TODO: Return the heuristic cost estimate of a node
    return self.distance(node, self.goal)

def calculate_fscore(self, node):
    """Calculate the f score of a node. """
    # TODO: Calculate and returns the f score of a node. 
    # REMEMBER F = G + H
    return self.get_gScore(node) + self.heuristic_cost_estimate(node)
     
def record_best_path_to(self, current, neighbor):
    """Record the best path to a node """
    # TODO: Record the best path to a node, by updating cameFrom, gScore, and fScore
    self.cameFrom[neighbor] = current
    self.gScore[neighbor] = self.get_tentative_gScore(current, neighbor)
    self.fScore[neighbor] = self.calculate_fscore(current)
    
# Associates implemented functions with PathPlanner class

PathPlanner.create_closedSet = create_closedSet
PathPlanner.create_openSet = create_openSet
PathPlanner.create_cameFrom = create_cameFrom
PathPlanner.create_gScore = create_gScore
PathPlanner.create_fScore = create_fScore
PathPlanner.set_map = set_map
PathPlanner.set_start = set_start
PathPlanner.set_goal = set_goal
PathPlanner.is_open_empty = is_open_empty
PathPlanner.get_current_node = get_current_node
PathPlanner.get_neighbors = get_neighbors
PathPlanner.get_gScore = get_gScore
PathPlanner.distance = distance
PathPlanner.get_tentative_gScore = get_tentative_gScore
PathPlanner.heuristic_cost_estimate = heuristic_cost_estimate
PathPlanner.calculate_fscore = calculate_fscore
PathPlanner.record_best_path_to = record_best_path_to 




    
    
    
    
    
    
    
